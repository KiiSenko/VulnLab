@{
    ViewData["Title"] = "Login";
}

<!--
    Demo Login Page Overview:
    ---------------------------
    This demo application illustrates the difference between a vulnerable SQL Injection implementation
    and a secure one using parameterized queries.
    
    Test Credentials:
      - Username: admin
      - Password: password

    How it works:
      - When "Enable SQL Injection Protection" is checked, the application uses a secure parameterized query.
      - When the checkbox is not checked, a vulnerable query (string concatenation) is used.
      
    Bypassing the Vulnerability:
      - In the vulnerable mode (checkbox unchecked), you can bypass authentication using SQL Injection payloads.
      - Example Payload to bypass login:
            Username: admin' OR '1'='1
            Password: anything
      - With protection enabled (checkbox checked), such payloads will fail.
      
    Form Mechanism:
      - The checkbox is given the name "isInjectionProtectionEnabled" and a value of "true".
      - A hidden field with the same name and a value of "false" is placed immediately after.
      - This order ensures that when the checkbox is checked, the browser sends "true" (which overrides "false"),
        and when not checked, only "false" is sent.
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap" rel="stylesheet">
    <link href="~/css/styles.css" rel="stylesheet" />
    <style>
        /* Nuovo stile dark/cyber-style */
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
            background: #121212;
            color: #e0e0e0;
        }
        .login-form {
            display: flex;
            flex-direction: column;
            justify-content: center;
            padding: 30px;
            background-color: #1e1e1e;
            border-radius: 10px;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.6);
            max-width: 400px;
            margin: 150px auto;
            border: 1px solid #333;
            transition: transform 0.3s ease;
        }
        .login-form:hover {
            transform: scale(1.02);
        }
        .login-form h2 {
            text-align: center;
            margin-bottom: 20px;
            color: #00ff99; /* colore "cyber" per il titolo */
        }
        /* Raggruppamento dei campi per allineamento ordinato */
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #ccc;
            font-size: 0.95rem;
        }
        .form-group input[type="text"],
        .form-group input[type="password"] {
            width: 100%;
            padding: 12px;
            border: 1px solid #333;
            border-radius: 5px;
            background-color: #2b2b2b;
            color: #e0e0e0;
            box-sizing: border-box;
        }
        /* Stile per il gruppo della checkbox */
        .checkbox-group {
            margin-bottom: 20px;
        }
        .checkbox-group label {
            color: #ccc;
            font-size: 0.95rem;
        }
        .checkbox-group input[type="checkbox"] {
            margin-right: 8px;
            accent-color: #007BFF;
        }
        .login-form button {
            background-color: #007BFF;
            color: #fff;
            padding: 12px;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
            width: 100%;
        }
        .login-form button:hover {
            background-color: #0056b3;
        }
        .login-form button:active {
            transform: scale(0.98);
        }
        footer {
            text-align: center;
            padding: 20px;
            background-color: #1a1a1a;
            color: #bbb;
        }
    </style>
</head>
<body>

    <div class="login-form">
        <h2>Login</h2>
        <div class="description">
            <p>
                Log in to access the demo application.
                <br />
                This demo illustrates how SQL Injection vulnerabilities can be exploited if proper security measures are not implemented.
                <br /><br />
                Test Credentials:
                <br />
                Username: <strong>admin</strong>
                <br />
                Password: <strong>password</strong>
                <br /><br />
                Bypass Instructions (when vulnerable):
                <br />
                Try using: <em>admin' OR '1'='1</em> as the Username and any value as Password.
                <br />
                (This bypass works only when SQL Injection Protection is <strong>disabled</strong>.)
            </p>
        </div>
        
        <!-- The form posts to the "Authenticate" action of the LoginController -->
        <form method="post" asp-action="Authenticate">
            <!-- Username Field -->
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" name="username" required />
            </div>
            <!-- Password Field -->
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required />
            </div>
            <!-- Checkbox per protezione SQL Injection -->
            <div class="checkbox-group">
                <label for="isInjectionProtectionEnabled">
                    <input type="checkbox" id="isInjectionProtectionEnabled" name="isInjectionProtectionEnabled" value="true" />
                    Enable SQL Injection Protection
                </label>
                <input type="hidden" name="isInjectionProtectionEnabled" value="false" />
            </div>
            <button type="submit">Login</button>
        </form>

        <!-- Debug JavaScript to log the checkbox state in the browser console -->
        <script>
            document.addEventListener("DOMContentLoaded", function() {
                const checkbox = document.getElementById("isInjectionProtectionEnabled");
                if (checkbox) {
                    console.log("Checkbox found");
                    checkbox.addEventListener("change", function() {
                        console.log("Checkbox changed, value:", checkbox.checked);
                    });
                } else {
                    console.error("Checkbox element not found!");
                }
            });
        </script>

        <!-- Display any message passed from the controller -->
        @if (ViewBag.Message != null)
        {
            <p style="color:red;">@ViewBag.Message</p>
        }
        <!-- Display the SQL Injection Protection state for debugging -->
        @if (ViewBag.IsInjectionProtectionEnabled != null)
        {
            <p>SQL Injection Protection is: @ViewBag.IsInjectionProtectionEnabled</p>
        }
    </div>

</body>
</html>
